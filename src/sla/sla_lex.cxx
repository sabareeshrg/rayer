#line 2 "sla_lex.c"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.85 95/04/24 10:48:47 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 67
#define YY_END_OF_BUFFER 68
static yyconst short int yy_accept[239] =
    {   0,
        0,    0,   68,   65,   66,    1,   65,   65,   65,    4,
        2,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,    0,   64,    0,
        4,    3,    0,    0,    0,    0,    4,   63,   63,    2,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   26,
       63,   25,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,    0,

        0,    0,    0,    0,    0,    5,   63,   63,   63,   63,
       63,   20,   42,   46,   44,   39,   38,   24,   41,   40,
       63,   63,   43,   21,   47,   45,   19,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   21,   63,   63,   63,   63,   63,
       63,   63,   63,   63,    5,    0,    0,    0,    0,   48,
       36,   49,   63,   58,   55,   56,   57,   33,   35,   34,
       52,   53,   22,   23,   30,   31,   63,   50,   37,   51,
       63,   63,   63,   63,   63,   63,   63,   63,   53,   63,
       63,   63,   63,   63,   63,   63,   61,   62,   59,    0,

       32,   54,   27,   29,   28,   15,   63,   63,   11,   63,
        6,   63,   63,   14,   63,   63,   63,   63,    0,   63,
       63,   10,   16,   13,   17,   63,   12,    9,   60,   18,
       63,    7,   63,   63,   63,   63,    8,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    1,    1,    1,    1,
        1,    1,    5,    1,    5,    6,    1,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    1,    8,    1,
        1,    1,    1,    1,    9,   10,   11,   12,   13,   14,
       15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   19,   19,   19,   19,
        1,    1,    1,    1,   19,    1,   31,   32,   33,   34,

       35,   36,   37,   38,   39,   40,   19,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   50,   51,   19,   52,
       19,   19,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[53] =
    {   0,
        1,    1,    2,    1,    1,    3,    3,    1,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3
    } ;

static yyconst short int yy_base[242] =
    {   0,
        0,    0,  509,  510,  510,  510,  504,   47,   48,   50,
        0,   52,  501,   54,   53,   61,   56,   82,   62,   66,
       85,   71,   68,   65,   72,   67,   86,   60,   98,   73,
      101,  103,  114,  111,  107,  112,  119,  502,  510,  498,
      121,  146,  460,  472,  459,  470,  159,  494,  116,    0,
      118,  130,  108,  138,  120,  161,  163,  135,  164,  493,
      165,  492,  168,  169,  154,  179,  173,  174,  180,  170,
      185,  106,  186,  190,  195,  196,  199,  200,  201,  203,
      202,  204,  205,  206,  207,  208,  216,  209,  210,  212,
      214,  220,  213,  222,  217,  215,  232,  236,  242,  220,

      463,  447,  459,  447,  486,  226,  260,  264,  266,  267,
      269,  486,  485,  484,  483,  482,  481,  480,  479,  478,
      271,  274,  477,  281,  476,  475,  474,  286,  218,  288,
      270,  272,  276,  283,  285,  287,  297,  299,  304,  301,
      302,  306,  303,  309,  313,  316,  318,  319,  321,  317,
      330,  331,  322,  323,  472,  443,  446,  432,  444,  468,
      467,  466,  324,  465,  464,  463,  462,  461,  460,  459,
      458,  335,  457,  456,  454,  451,  362,  448,  447,  446,
      337,  325,  351,  346,  336,  340,  341,  356,  357,  363,
      368,  373,  377,  374,  378,  385,  510,  510,  510,  409,

      444,  443,  442,  440,  439,  438,  382,  380,  434,  387,
      432,  390,  391,  431,  393,  392,  394,  396,  378,  398,
      395,  417,  413,  412,  410,  400,  409,  407,  510,  230,
      401,  224,  397,  408,  404,  406,  125,  510,  455,   58,
      458
    } ;

static yyconst short int yy_def[242] =
    {   0,
      238,    1,  238,  238,  238,  238,  239,  238,  238,  240,
      241,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  239,  238,  238,
      238,  238,  238,  238,  238,  238,  240,  240,  240,  241,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  238,

      238,  238,  238,  238,  238,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  238,  238,  238,  238,  238,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  238,  238,  238,  238,

      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  238,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  238,  240,
      240,  240,  240,  240,  240,  240,  240,    0,  238,  238,
      238
    } ;

static yyconst short int yy_nxt[563] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   13,   17,   13,   13,   18,   13,   19,
       20,   21,   13,   22,   13,   13,   23,   13,   13,   13,
       24,   13,   25,   26,   27,   28,   29,   13,   30,   31,
       32,   33,   34,   13,   35,   13,   13,   36,   13,   13,
       37,   13,   40,   41,   42,   40,   47,  238,  238,  238,
       48,  238,   49,   51,   52,  238,  238,  238,   58,   54,
      238,  238,  238,  238,   63,   55,  238,  238,  238,   53,
       43,   44,   56,   59,   49,   57,   45,  238,   65,   64,
      238,  238,   46,   69,   66,   60,   71,   67,   72,   70,

       81,   76,   61,  238,   73,   77,  238,   68,  238,   62,
       78,  238,  238,  238,   84,   74,  238,  238,   75,  238,
      105,  238,  106,  238,  238,  238,   40,   41,   79,  107,
      238,   80,   82,  100,  109,  238,   60,   86,  108,  131,
      238,   87,   85,  238,   89,   92,   83,  111,  116,   62,
       94,   88,   42,   98,   93,  100,   95,   90,  100,  238,
       96,   97,   99,   91,   40,   47,  238,  110,  238,  238,
      238,   49,  112,  238,  238,  238,  113,  117,  238,  238,
      100,  119,  120,  121,  238,  238,  123,  124,  118,  114,
      238,  238,  115,   49,  130,  238,  129,  127,  122,  125,

      238,  238,  126,  128,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  132,  238,  238,  238,
      238,  238,  238,  238,  105,  238,  155,  238,  135,  238,
      133,  238,  106,  177,  112,  238,  140,  238,  113,  116,
      117,  238,  134,  119,  120,  139,  136,  238,  138,  137,
      114,  118,  141,  115,  144,  123,  145,  127,  142,  146,
      147,  150,  143,  151,  149,  238,  148,  125,  153,  238,
      126,  238,  238,  160,  238,  238,  238,  238,  152,  238,
      165,  238,  154,  163,  168,  161,  238,  171,  238,  162,
      238,  238,  238,  238,  173,  164,  166,  169,  167,  175,

      170,  178,  238,  172,  238,  160,  238,  238,  238,  238,
      174,  238,  181,  179,  238,  176,  161,  180,  238,  182,
      162,  238,  238,  238,  238,  183,  238,  238,  238,  238,
      238,  184,  165,  164,  185,  238,  238,  186,  168,  187,
      238,  238,  238,  201,  171,  238,  238,  166,  173,  167,
      169,  238,  188,  170,  175,  193,  238,  190,  192,  189,
      191,  238,  238,  174,  202,  178,  194,  238,  238,  176,
      195,  206,  196,  238,  210,  203,  179,  201,  238,  238,
      180,  207,  238,  238,  209,  238,  208,  238,  204,  211,
      238,  205,  238,  213,  212,  238,  238,  238,  238,  238,

      238,  238,  238,  238,  216,  238,  238,  202,  203,  238,
      221,  238,  238,  238,  238,  238,  214,  238,  238,  215,
      204,  217,  238,  205,  226,  229,  218,  231,  220,  225,
      228,  224,  230,  222,  232,  233,  238,  238,  234,  238,
      227,  223,  235,  238,  238,  238,  236,  238,  238,  238,
      219,  238,  238,  238,  237,   38,  238,   38,   50,  238,
       50,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  200,  199,  198,  197,  155,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  155,  159,  158,  157,  156,  238,  238,  238,

      104,  103,  102,  101,   42,   39,  238,   39,  238,    3,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238
    } ;

static yyconst short int yy_chk[563] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    8,    8,    9,   10,   10,   12,   15,   14,
      240,   17,   10,   12,   14,   28,   16,   19,   17,   15,
       24,   20,   26,   23,   19,   15,   22,   25,   30,   14,
        9,    9,   16,   17,   10,   16,    9,   18,   20,   19,
       21,   27,    9,   22,   20,   18,   23,   21,   24,   22,

       28,   26,   18,   29,   25,   26,   31,   21,   32,   18,
       26,   72,   35,   53,   30,   25,   34,   36,   25,   33,
       49,   49,   49,   51,   37,   55,   41,   41,   27,   51,
      237,   27,   29,   41,   53,   52,   31,   32,   52,   72,
       58,   32,   31,   54,   33,   34,   29,   55,   58,   31,
       35,   32,   42,   37,   34,   41,   35,   33,   42,   65,
       36,   36,   37,   33,   47,   47,   56,   54,   57,   59,
       61,   47,   56,   63,   64,   70,   57,   59,   67,   68,
       42,   63,   64,   65,   66,   69,   67,   67,   61,   57,
       71,   73,   57,   47,   71,   74,   70,   68,   66,   67,

       75,   76,   67,   69,   77,   78,   79,   81,   80,   82,
       83,   84,   85,   86,   88,   89,   73,   90,   93,   91,
       96,   87,   95,  129,  100,   92,  100,   94,   76,  232,
       74,  106,  106,  129,   79,  230,   84,   97,   80,   82,
       83,   98,   75,   86,   88,   81,   77,   99,   78,   77,
       80,   85,   87,   80,   91,   92,   92,   93,   89,   93,
       94,   96,   90,   97,   95,  107,   94,   92,   98,  108,
       92,  109,  110,  107,  111,  131,  121,  132,   97,  122,
      110,  133,   99,  108,  121,  107,  124,  122,  134,  107,
      135,  128,  136,  130,  124,  109,  110,  121,  111,  128,

      121,  130,  137,  122,  138,  131,  140,  141,  143,  139,
      124,  142,  132,  130,  144,  128,  131,  130,  145,  133,
      131,  146,  150,  147,  148,  135,  149,  153,  154,  163,
      182,  136,  137,  134,  139,  151,  152,  140,  143,  141,
      172,  185,  181,  163,  144,  186,  187,  137,  145,  138,
      143,  184,  142,  143,  148,  150,  183,  146,  149,  144,
      147,  188,  189,  145,  172,  151,  152,  177,  190,  148,
      153,  182,  154,  191,  186,  177,  151,  181,  192,  194,
      151,  183,  193,  195,  185,  208,  184,  207,  177,  187,
      196,  177,  210,  190,  188,  212,  213,  216,  215,  217,

      221,  218,  233,  220,  194,  226,  231,  189,  192,  235,
      208,  236,  228,  234,  227,  225,  191,  224,  223,  193,
      192,  195,  222,  192,  216,  219,  196,  221,  207,  215,
      218,  213,  220,  210,  226,  231,  214,  211,  233,  209,
      217,  212,  234,  206,  205,  204,  235,  203,  202,  201,
      200,  180,  179,  178,  236,  239,  176,  239,  241,  175,
      241,  174,  173,  171,  170,  169,  168,  167,  166,  165,
      164,  162,  161,  160,  159,  158,  157,  156,  155,  127,
      126,  125,  123,  120,  119,  118,  117,  116,  115,  114,
      113,  112,  105,  104,  103,  102,  101,   62,   60,   48,

       46,   45,   44,   43,   40,   38,   13,    7,    3,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
char *yytext;
#line 1 "..\\..\\src\\sla\\sla.l"
#define INITIAL 0
#line 2 "..\\..\\src\\sla\\sla.l"
#include <string.h>
#include "sla.hxx"
#include "sla_tab.hxx"
int num_lines=1;
#define isatty(a) 0
// #define PRINTF(a, b) printf(a, b)
#define PRINTF(a, b)
#line 577 "sla_lex.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 13 "..\\..\\src\\sla\\sla.l"

#line 726 "sla_lex.c"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 239 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 510 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 14 "..\\..\\src\\sla\\sla.l"
{ num_lines++; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 15 "..\\..\\src\\sla\\sla.l"
{}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 16 "..\\..\\src\\sla\\sla.l"
{ yylval.dval = atof(yytext); PRINTF("value=%s\n", yytext); return VALUE; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 17 "..\\..\\src\\sla\\sla.l"
{ yylval.dval = atof(yytext); PRINTF("valuE=%s\n", yytext); return VALUE; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 18 "..\\..\\src\\sla\\sla.l"
{ yylval.dval = atof(yytext); PRINTF("Value=%s\n", yytext); return VALUE; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 19 "..\\..\\src\\sla\\sla.l"
{ return T_LIGHT; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 20 "..\\..\\src\\sla\\sla.l"
{ return T_SURFACE; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 21 "..\\..\\src\\sla\\sla.l"
{ return T_DISPLACEMENT; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 22 "..\\..\\src\\sla\\sla.l"
{ return T_VOLUME; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 23 "..\\..\\src\\sla\\sla.l"
{ return T_IMAGER; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 24 "..\\..\\src\\sla\\sla.l"
{ return T_FLOAT; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 25 "..\\..\\src\\sla\\sla.l"
{ return T_VECTOR; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 26 "..\\..\\src\\sla\\sla.l"
{ return T_NORMAL; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 27 "..\\..\\src\\sla\\sla.l"
{ return T_POINT; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 28 "..\\..\\src\\sla\\sla.l"
{ return T_COLOR; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 29 "..\\..\\src\\sla\\sla.l"
{ return T_MATRIX; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 30 "..\\..\\src\\sla\\sla.l"
{ return T_STRING; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 31 "..\\..\\src\\sla\\sla.l"
{ return DECLARE; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 33 "..\\..\\src\\sla\\sla.l"
{ yylval.ival = NOP; return OPCODE0; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 34 "..\\..\\src\\sla\\sla.l"
{ yylval.ival = END; return OPCODE0; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 35 "..\\..\\src\\sla\\sla.l"
{ yylval.ival = NEG; return OPCODE0; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 37 "..\\..\\src\\sla\\sla.l"
{ yylval.ival = NEGF; return OPCODE1; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 38 "..\\..\\src\\sla\\sla.l"
{ yylval.ival = NEGV; return OPCODE1; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 39 "..\\..\\src\\sla\\sla.l"
{ yylval.ival = JMP; return OPCODE1; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 40 "..\\..\\src\\sla\\sla.l"
{ yylval.ival = JT; return OPCODE1; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 41 "..\\..\\src\\sla\\sla.l"
{ yylval.ival = JF; return OPCODE1; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 42 "..\\..\\src\\sla\\sla.l"
{ yylval.ival = PUSHF; return OPCODE1; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 43 "..\\..\\src\\sla\\sla.l"
{ yylval.ival = PUSHV; return OPCODE1; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 44 "..\\..\\src\\sla\\sla.l"
{ yylval.ival = PUSHS; return OPCODE1; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 45 "..\\..\\src\\sla\\sla.l"
{ yylval.ival = POPF; return OPCODE1; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 46 "..\\..\\src\\sla\\sla.l"
{ yylval.ival = POPV; return OPCODE1; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 47 "..\\..\\src\\sla\\sla.l"
{ yylval.ival = CCALL; return OPCODE1; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 49 "..\\..\\src\\sla\\sla.l"
{ yylval.ival = MOVF; return OPCODE2; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 50 "..\\..\\src\\sla\\sla.l"
{ yylval.ival = MOVV; return OPCODE2; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 51 "..\\..\\src\\sla\\sla.l"
{ yylval.ival = MOVS; return OPCODE2; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 52 "..\\..\\src\\sla\\sla.l"
{ yylval.ival = ADDR; return OPCODE2; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 53 "..\\..\\src\\sla\\sla.l"
{ yylval.ival = SUBR; return OPCODE2; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 54 "..\\..\\src\\sla\\sla.l"
{ yylval.ival = GTF; return OPCODE2; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 55 "..\\..\\src\\sla\\sla.l"
{ yylval.ival = GEF; return OPCODE2; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 56 "..\\..\\src\\sla\\sla.l"
{ yylval.ival = LTF; return OPCODE2; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 57 "..\\..\\src\\sla\\sla.l"
{ yylval.ival = LEF; return OPCODE2; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 58 "..\\..\\src\\sla\\sla.l"
{ yylval.ival = EQF; return OPCODE2; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 59 "..\\..\\src\\sla\\sla.l"
{ yylval.ival = NEF; return OPCODE2; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 60 "..\\..\\src\\sla\\sla.l"
{ yylval.ival = EQV; return OPCODE2; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 61 "..\\..\\src\\sla\\sla.l"
{ yylval.ival = NEV; return OPCODE2; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 62 "..\\..\\src\\sla\\sla.l"
{ yylval.ival = EQS; return OPCODE2; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 63 "..\\..\\src\\sla\\sla.l"
{ yylval.ival = NES; return OPCODE2; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 65 "..\\..\\src\\sla\\sla.l"
{ yylval.ival = ADDF; return OPCODE3; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 66 "..\\..\\src\\sla\\sla.l"
{ yylval.ival = ADDV; return OPCODE3; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 67 "..\\..\\src\\sla\\sla.l"
{ yylval.ival = SUBF; return OPCODE3; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 68 "..\\..\\src\\sla\\sla.l"
{ yylval.ival = SUBV; return OPCODE3; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 69 "..\\..\\src\\sla\\sla.l"
{ yylval.ival = MULF; return OPCODE3; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 70 "..\\..\\src\\sla\\sla.l"
{ yylval.ival = MULV; return OPCODE3; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 71 "..\\..\\src\\sla\\sla.l"
{ yylval.ival = MULVV; return OPCODE3; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 72 "..\\..\\src\\sla\\sla.l"
{ yylval.ival = DIVF; return OPCODE3; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 73 "..\\..\\src\\sla\\sla.l"
{ yylval.ival = DIVV; return OPCODE3; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 74 "..\\..\\src\\sla\\sla.l"
{ yylval.ival = DOTV; return OPCODE3; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 75 "..\\..\\src\\sla\\sla.l"
{ yylval.ival = CRSV; return OPCODE3; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 77 "..\\..\\src\\sla\\sla.l"
{ return INFO; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 78 "..\\..\\src\\sla\\sla.l"
{ return PARAMS; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 79 "..\\..\\src\\sla\\sla.l"
{ return CODE; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 80 "..\\..\\src\\sla\\sla.l"
{ return DATA; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 81 "..\\..\\src\\sla\\sla.l"
{ PRINTF("ident=%s\n", yytext); strcpy(yylval.str, yytext);  return IDENTIFIER; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 82 "..\\..\\src\\sla\\sla.l"
{ PRINTF("string=%s\n", yytext); strcpy(yylval.str, yytext+1); yylval.str[strlen(yytext)-2]=0; return C_STRING; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 83 "..\\..\\src\\sla\\sla.l"
{ PRINTF("c=%c\n", yytext[0]); return yytext[0]; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 84 "..\\..\\src\\sla\\sla.l"
{}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 86 "..\\..\\src\\sla\\sla.l"
ECHO;
	YY_BREAK
#line 1144 "sla_lex.c"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a singled characater, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 239 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 239 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 238);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yytext_ptr = yy_c_buf_p;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						{
						yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
						return EOF;
						}

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
					break;

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in yyinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *str )
#else
YY_BUFFER_STATE yy_scan_string( str )
yyconst char *str;
#endif
	{
	int len;
	for ( len = 0; str[len]; ++len )
		;

	return yy_scan_bytes( str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 86 "..\\..\\src\\sla\\sla.l"

