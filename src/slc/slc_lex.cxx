#line 2 "slc_lex.c"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.85 95/04/24 10:48:47 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 56
#define YY_END_OF_BUFFER 57
static yyconst short int yy_accept[394] =
    {   0,
        0,    0,    4,    4,   57,   54,   55,    9,   54,   54,
        7,   54,   54,   54,   54,   54,   54,   50,   39,   45,
       37,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   54,    4,
        4,    6,    4,    4,    4,    4,    5,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    0,    0,   42,    0,   53,    0,   43,
       48,   46,   47,   51,    1,   49,    0,   50,    0,   40,
       41,   38,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   28,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   44,    4,
        4,    4,    4,    4,    4,    4,    4,    0,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    0,    0,   51,   52,   52,
       52,   52,   52,   52,   52,   31,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,    4,    2,    3,    4,    4,    4,    4,

        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    0,   52,   52,   52,   52,   29,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   22,   52,   52,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    0,   35,   17,   52,   52,   52,   15,
       52,   52,   10,   52,   52,   52,   18,   52,   32,   52,
       52,   52,   52,   52,   52,   30,    4,    4,    4,    4,

        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    0,
       52,   52,   26,   52,   14,   21,   20,   25,   27,   16,
       52,   52,   52,   19,   12,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    0,   52,   52,   52,   11,   24,   23,    4,    4,
        4,    4,    4,    4,    4,    0,    8,   36,   52,   52,
        4,    4,    4,    4,   52,   52,   52,    4,    4,    4,
       52,   52,   33,    4,    4,    4,   52,   34,    4,    4,
       13,    4,    0

    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    1,    7,    1,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,    1,    1,   14,
       15,   16,    1,    1,   17,   17,   17,   17,   18,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
        1,    1,    1,    1,   17,    1,   19,   20,   21,   22,

       23,   24,   25,   26,   27,   17,   28,   29,   30,   31,
       32,   33,   17,   34,   35,   36,   37,   38,   39,   40,
       41,   17,    1,   42,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[43] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    3,    1,    1,
        1,    1,    4,    1,    1,    1,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    1
    } ;

static yyconst short int yy_base[403] =
    {   0,
        0,    0,   42,    0,  780,  781,   83,  781,  764,  773,
      744,  769,  760,  759,  758,  759,   78,   76,  756,  755,
      754,  755,   75,   78,   77,   79,   83,   87,   93,   84,
       89,   85,   92,  100,   94,  101,  114,  112,  725,    0,
      116,  781,  751,  131,  732,  757,  128,  748,  747,  748,
      126,  131,  745,  744,  743,  154,  196,  113,  123,  142,
      119,  149,  147,  143,  152,  138,  153,  157,  156,  182,
      195,  189,  715,  187,  748,  781,  750,  781,  720,  781,
      781,  781,  781,  208,  781,  781,  740,  221,  215,  781,
      781,  781,    0,  739,  181,  204,  206,  207,  116,  223,

      209,  738,  224,  227,  232,  234,  235,  236,  237,  238,
      239,  241,  243,  246,  245,  250,  249,  253,  781,    0,
      279,  742,    0,  277,    0,  715,    0,  258,    0,    0,
      270,    0,  735,  276,  287,    0,    0,    0,  300,  713,
      261,  288,  286,  289,  231,  258,  712,  711,  269,  294,
      293,  295,  710,  296,  299,  300,  306,  709,  708,  310,
      707,  304,  312,  316,    0,  721,  726,  725,  332,  334,
      335,  336,  339,  340,  341,  724,  342,  343,  344,  346,
      345,  348,  351,  352,  354,  359,  361,  363,  364,  365,
      370,  371,  375,  717,  733,  781,  721,  720,  372,  361,

      360,  364,  376,  377,  383,  698,  375,  382,  387,  697,
      384,  386,  391,  389,  396,  397,  403,  404,  395,  398,
      411,  405,  406,  705,  428,  430,  431,  433,  716,  434,
      435,  436,  437,  438,  440,  442,  439,  441,  444,  446,
      450,  456,  452,  459,  457,  715,  460,  469,  702,  451,
      692,  460,  454,  691,  690,  457,  465,  473,  464,  470,
      482,  468,  472,  689,  688,  478,  484,  479,  483,  487,
      687,  490,  491,  690,  706,  705,  502,  509,  510,  704,
      513,  514,  703,  516,  517,  518,  702,  519,  701,  522,
      521,  523,  524,  525,  526,  700,  682,  677,  676,  527,

      526,  531,  675,  517,  674,  673,  529,  537,  534,  672,
      533,  671,  518,  369,  670,  541,  669,  550,  668,  682,
      540,  561,  687,  563,  686,  685,  684,  683,  682,  681,
      565,  566,  567,  680,  679,  672,  549,  564,  656,  556,
      655,  654,  653,  652,  642,  641,  566,  561,  568,  638,
      637,  664,  584,  586,  591,  651,  650,  646,  598,  580,
      582,  589,  622,  621,  620,  650,  781,  639,  598,  599,
      610,  612,  585,  586,  608,  611,  613,  604,  608,  610,
      612,  624,  628,  614,  616,  606,  621,  568,  615,  274,
      273,  161,  781,  657,  131,  661,  665,  669,   97,  673,

      677,  681
    } ;

static yyconst short int yy_def[403] =
    {   0,
      393,    1,  393,    3,  393,  393,  393,  393,  393,  394,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  393,  396,
      396,  393,  396,  397,  396,  396,  393,  396,  396,  396,
      396,  396,  396,  396,  396,  398,  398,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,  396,  393,  393,  393,  394,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  399,  395,  395,  395,  395,  395,  395,  395,

      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  393,  396,
      396,  396,  396,  397,  396,  396,  396,  393,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  400,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,  396,  393,  393,  393,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  396,  393,  393,  396,  396,   57,   57,

       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,  393,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  396,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,  393,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  396,   57,   57,   57,

       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,  393,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  396,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,  401,  395,  395,  395,  395,  395,  395,  402,   57,
       57,   57,   57,   57,   57,  401,  393,  395,  395,  395,
      402,   57,   57,   57,  395,  395,  395,   57,   57,   57,
      395,  395,  395,   57,   57,   57,  395,  395,   57,   57,
      395,   57,    0,  393,  393,  393,  393,  393,  393,  393,

      393,  393
    } ;

static yyconst short int yy_nxt[824] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   22,   22,   23,
       24,   25,   26,   27,   22,   22,   28,   22,   29,   30,
       31,   32,   33,   34,   35,   22,   36,   37,   38,   22,
       22,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   50,   51,   52,   53,   54,   55,   56,   56,
       56,   57,   58,   59,   60,   61,   56,   56,   62,   56,
       63,   64,   65,   66,   67,   68,   69,   56,   70,   71,
       72,   56,   56,   73,   74,   85,   87,   93,   88,   93,
       93,   93,   86,   89,   75,   93,   93,   93,   89,   93,

       93,   93,  106,   97,   93,   93,   93,   98,   95,   96,
      102,  100,   93,   93,  101,  103,  104,  121,   99,  105,
      107,  108,  110,  109,   93,  111,   93,  122,   93,  112,
      113,  114,  115,   85,   94,  125,  116,  118,   77,  128,
      132,  133,   81,  134,  142,  117,  140,  146,  135,  143,
      147,  174,  140,  135,  120,  120,  140,  120,  120,  120,
      120,  152,  120,  120,  120,  120,  139,  120,  120,  120,
      144,  140,  148,  151,  154,  140,  140,  149,  150,  156,
      140,  145,  140,  153,  155,  140,  140,  157,   74,  140,
      140,  158,  159,   93,  140,  120,  120,  120,   75,  120,

      120,  120,  120,  169,  120,  120,  120,  120,  139,  120,
      120,  120,  160,  161,  164,  140,   93,  162,   93,   93,
       84,   93,  140,  167,  167,   89,  163,  168,  140,  141,
       89,   87,  170,   88,  171,   93,   93,  120,   89,   93,
      172,  173,  176,   89,   93,  178,   93,   93,   93,   93,
       93,   93,  177,   93,  175,   93,  179,   93,   93,  195,
      196,   93,   93,  183,  140,   93,  204,  185,  181,  180,
      190,  182,  188,  184,  186,  191,  187,  192,  189,  193,
      121,  125,  131,  199,   77,   93,  133,  135,  134,  205,
      122,  140,  135,  135,  140,  197,  197,  207,  135,  198,

      120,  120,  140,  120,  120,  120,  120,  140,  120,  120,
      120,  120,  208,  120,  120,  120,  200,  209,  201,  140,
      202,  140,  140,  203,  220,  213,  140,  140,  140,  140,
      210,  212,  140,  140,  215,  214,  218,  140,  221,  140,
      222,  120,  223,  140,   93,  140,   93,   93,   93,  140,
      225,   93,   93,   93,   93,   93,   93,   93,   93,  231,
       93,  229,  230,   93,   93,  226,   93,  233,  228,  234,
      227,   93,  240,   93,  236,   93,   93,   93,  232,  235,
      237,  238,   93,   93,  242,  241,  243,   93,  239,  347,
      250,  246,  251,  140,  140,  252,  253,  140,  254,  255,

      245,  256,  140,  248,  244,  140,  258,  247,  140,  140,
      140,  257,  259,  261,  265,  140,  140,  140,  262,  140,
      140,  263,  140,  266,  140,  264,  267,  268,  140,  140,
      140,  140,  271,  270,  273,  269,  140,  140,  140,  140,
       93,  272,   93,   93,  140,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,  275,   93,  277,   93,  282,
      285,  278,   93,  276,   93,  281,  284,  279,   93,   93,
      280,   93,   93,  283,  291,  286,  287,  288,  298,  289,
      290,   93,  301,  292,  140,  293,  300,  140,  294,  295,
      140,  296,  303,  140,  304,  305,  307,  140,  140,  306,

      308,  140,  314,  140,  309,  140,  140,  310,  313,  316,
      315,  140,  140,  319,   93,  140,  140,  140,  317,  318,
      140,   93,   93,  140,  140,   93,   93,  322,   93,   93,
       93,   93,  321,   93,   93,   93,   93,   93,   93,  324,
      323,  331,  346,  340,  338,  327,  330,  325,  335,  329,
      140,  140,   93,  328,  333,  326,  332,  337,  334,  140,
      140,  339,  140,  345,  140,  343,  140,  140,  342,  344,
      140,  349,  351,   93,  140,   93,  353,   93,   93,   93,
       93,  354,  140,  140,  361,  360,  362,  356,  363,  140,
      364,  358,  365,  355,  140,  357,   93,  140,   93,  140,

      367,  140,  372,   93,  373,  366,  368,  374,  369,  370,
       93,   93,  367,  140,  378,  140,  379,  366,  140,  140,
       93,  380,  140,   93,   93,   93,  384,  375,  385,  376,
      381,  382,  386,   93,  377,  383,   93,  140,  390,  140,
       93,  140,  387,  140,  389,  140,  388,  140,  140,  140,
      392,   93,  367,  140,  140,  140,  391,   77,   93,   77,
       77,  120,   93,   93,  120,  124,  367,  124,  124,  140,
      140,  140,  140,  139,  140,  140,  139,  366,  366,  366,
      366,  371,  371,  371,  371,  140,  140,  140,  140,  140,
      359,   93,   93,   93,   93,   93,   93,   93,   93,   93,

      352,  140,  350,  348,  140,  140,  140,  341,  140,  140,
      140,  336,   93,   93,   93,   93,   93,   93,   93,  320,
      140,  312,  311,  302,  140,  299,  297,   93,   93,  274,
      260,  140,  198,  198,  195,  249,   93,  168,  168,  224,
      219,  217,  216,  211,  140,  206,  140,  131,  194,   85,
       93,   93,   84,  166,   78,   85,  165,  138,  137,  136,
      131,  130,  129,  127,  126,  123,  119,   93,   92,   91,
       90,   84,   83,   82,   81,   80,   79,   78,   76,  393,
        5,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,

      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393
    } ;

static yyconst short int yy_chk[824] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    7,   17,   18,   23,   18,   25,
       24,   26,   17,   18,    7,   27,   30,   32,   18,   28,

      399,   31,   30,   25,   33,   29,   35,   26,   23,   24,
       28,   27,   34,   36,   27,   28,   28,   41,   26,   29,
       31,   32,   34,   33,   38,   35,   37,   41,   99,   35,
       35,   36,   37,   51,  395,   44,   37,   38,   44,   47,
       51,   52,   47,   52,   58,   37,   58,   61,   52,   59,
       61,   99,   61,   52,   56,   56,   59,   56,   56,   56,
       56,   64,   56,   56,   56,   56,   56,   56,   56,   56,
       60,   66,   62,   63,   66,   60,   64,   62,   62,   68,
       63,   60,   62,   65,   67,   65,   67,   69,   74,   69,
       68,   69,   69,   95,  392,   56,   57,   57,   74,   57,

       57,   57,   57,   95,   57,   57,   57,   57,   57,   57,
       57,   57,   70,   71,   72,   70,   96,   71,   97,   98,
       84,  101,   72,   89,   89,   84,   71,   89,   71,   57,
       84,   88,   96,   88,   96,  100,  103,   57,   88,  104,
       97,   98,  101,   88,  105,  104,  106,  107,  108,  109,
      110,  111,  103,  112,  100,  113,  105,  115,  114,  128,
      128,  117,  116,  109,  145,  118,  145,  111,  107,  106,
      116,  108,  114,  110,  112,  117,  113,  117,  115,  118,
      121,  124,  131,  141,  124,  391,  134,  131,  134,  146,
      121,  146,  131,  134,  141,  135,  135,  149,  134,  135,

      139,  139,  149,  139,  139,  139,  139,  390,  139,  139,
      139,  139,  150,  139,  139,  139,  142,  151,  142,  143,
      143,  142,  144,  144,  162,  155,  151,  150,  152,  154,
      152,  154,  155,  156,  157,  156,  160,  162,  163,  157,
      163,  139,  164,  160,  169,  163,  170,  171,  172,  164,
      169,  173,  174,  175,  177,  178,  179,  181,  180,  175,
      182,  173,  174,  183,  184,  170,  185,  178,  172,  179,
      171,  186,  185,  187,  181,  188,  189,  190,  177,  180,
      182,  183,  191,  192,  187,  186,  188,  193,  184,  314,
      199,  191,  200,  201,  200,  201,  202,  202,  203,  204,

      190,  205,  314,  193,  189,  199,  208,  192,  207,  203,
      204,  207,  209,  211,  215,  208,  205,  211,  212,  212,
      209,  213,  214,  216,  213,  214,  217,  218,  219,  215,
      216,  220,  221,  220,  223,  219,  217,  218,  222,  223,
      225,  222,  226,  227,  221,  228,  230,  231,  232,  233,
      234,  237,  235,  238,  236,  225,  239,  227,  240,  233,
      236,  228,  241,  226,  243,  232,  235,  230,  242,  245,
      231,  244,  247,  234,  242,  237,  238,  239,  250,  240,
      241,  248,  253,  243,  250,  244,  252,  253,  245,  247,
      256,  248,  256,  252,  257,  258,  260,  259,  257,  259,

      261,  262,  267,  260,  262,  263,  258,  263,  266,  269,
      268,  266,  268,  273,  277,  261,  269,  267,  270,  272,
      270,  278,  279,  272,  273,  281,  282,  278,  284,  285,
      286,  288,  277,  291,  290,  292,  293,  294,  295,  281,
      279,  291,  313,  304,  301,  285,  290,  282,  295,  288,
      304,  313,  321,  286,  293,  284,  292,  300,  294,  301,
      300,  302,  307,  311,  302,  308,  311,  309,  307,  309,
      308,  316,  318,  322,  316,  324,  321,  331,  332,  333,
      388,  322,  337,  318,  338,  337,  340,  331,  347,  340,
      348,  333,  349,  324,  348,  332,  353,  338,  354,  347,

      359,  349,  360,  355,  361,  359,  353,  362,  354,  355,
      369,  370,  371,  360,  373,  361,  374,  371,  373,  374,
      375,  374,  362,  376,  381,  377,  378,  369,  379,  370,
      375,  376,  380,  387,  370,  377,  382,  378,  385,  386,
      383,  379,  381,  380,  384,  372,  382,  384,  389,  385,
      389,  368,  366,  365,  364,  363,  387,  394,  358,  394,
      394,  396,  357,  356,  396,  397,  352,  397,  397,  398,
      351,  350,  398,  400,  346,  345,  400,  401,  401,  401,
      401,  402,  402,  402,  402,  344,  343,  342,  341,  339,
      336,  335,  334,  330,  329,  328,  327,  326,  325,  323,

      320,  319,  317,  315,  312,  310,  306,  305,  303,  299,
      298,  297,  296,  289,  287,  283,  280,  276,  275,  274,
      271,  265,  264,  255,  254,  251,  249,  246,  229,  224,
      210,  206,  198,  197,  195,  194,  176,  168,  167,  166,
      161,  159,  158,  153,  148,  147,  140,  133,  126,  122,
      102,   94,   87,   79,   77,   75,   73,   55,   54,   53,
       50,   49,   48,   46,   45,   43,   39,   22,   21,   20,
       19,   16,   15,   14,   13,   12,   11,   10,    9,    5,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,

      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
char *yytext;
#line 1 "..\\..\\src\\slc\\slc.l"
#define INITIAL 0
#line 2 "..\\..\\src\\slc\\slc.l"

#include <string.h>
#include <string>
#include <vector>
using namespace std;
class Node;
class NodeList;
#include "slc_tab.hxx"

int g_numlines = 1;
string g_filename;
#define isatty(a) 0
#define MAX_STRLEN 255

#define COMMENT 1

#line 697 "slc_lex.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 26 "..\\..\\src\\slc\\slc.l"

#line 846 "slc_lex.c"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 394 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 781 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 27 "..\\..\\src\\slc\\slc.l"
{ BEGIN COMMENT; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 28 "..\\..\\src\\slc\\slc.l"
{ BEGIN 0; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 29 "..\\..\\src\\slc\\slc.l"
{ ++g_numlines; BEGIN 0; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 30 "..\\..\\src\\slc\\slc.l"
{ }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 31 "..\\..\\src\\slc\\slc.l"
{ }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 32 "..\\..\\src\\slc\\slc.l"
{ ++g_numlines; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 33 "..\\..\\src\\slc\\slc.l"
{ return CPP_LINE; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 34 "..\\..\\src\\slc\\slc.l"
{ }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 35 "..\\..\\src\\slc\\slc.l"
{ ++g_numlines; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 36 "..\\..\\src\\slc\\slc.l"
{ return LIGHT; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 37 "..\\..\\src\\slc\\slc.l"
{ return SURFACE; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 38 "..\\..\\src\\slc\\slc.l"
{ return VOLUME; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 39 "..\\..\\src\\slc\\slc.l"
{ return DISPLACEMENT; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 40 "..\\..\\src\\slc\\slc.l"
{ return IMAGER; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 41 "..\\..\\src\\slc\\slc.l"
{ return FLOAT; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 42 "..\\..\\src\\slc\\slc.l"
{ return STRING; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 43 "..\\..\\src\\slc\\slc.l"
{ return COLOR; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 44 "..\\..\\src\\slc\\slc.l"
{ return POINT; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 45 "..\\..\\src\\slc\\slc.l"
{ return VECTOR; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 46 "..\\..\\src\\slc\\slc.l"
{ return NORMAL; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 47 "..\\..\\src\\slc\\slc.l"
{ return MATRIX; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 48 "..\\..\\src\\slc\\slc.l"
{ return VOID; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 49 "..\\..\\src\\slc\\slc.l"
{ return VARYING; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 50 "..\\..\\src\\slc\\slc.l"
{ return UNIFORM; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 51 "..\\..\\src\\slc\\slc.l"
{ return OUTPUT; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 52 "..\\..\\src\\slc\\slc.l"
{ return EXTERN; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 54 "..\\..\\src\\slc\\slc.l"
{ return RETURN; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 55 "..\\..\\src\\slc\\slc.l"
{ return IF; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 56 "..\\..\\src\\slc\\slc.l"
{ return ELSE; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 57 "..\\..\\src\\slc\\slc.l"
{ return WHILE; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 58 "..\\..\\src\\slc\\slc.l"
{ return FOR; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 59 "..\\..\\src\\slc\\slc.l"
{ return SOLAR; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 60 "..\\..\\src\\slc\\slc.l"
{ return ILLUMINATE; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 61 "..\\..\\src\\slc\\slc.l"
{ return ILLUMINANCE; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 62 "..\\..\\src\\slc\\slc.l"
{ return BREAK; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 63 "..\\..\\src\\slc\\slc.l"
{ return CONTINUE; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 65 "..\\..\\src\\slc\\slc.l"
{ return GT; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 66 "..\\..\\src\\slc\\slc.l"
{ return GE; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 67 "..\\..\\src\\slc\\slc.l"
{ return LT; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 68 "..\\..\\src\\slc\\slc.l"
{ return LE; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 69 "..\\..\\src\\slc\\slc.l"
{ return EQ; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 70 "..\\..\\src\\slc\\slc.l"
{ return NE; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 71 "..\\..\\src\\slc\\slc.l"
{ return AND; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 72 "..\\..\\src\\slc\\slc.l"
{ return OR; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 73 "..\\..\\src\\slc\\slc.l"
{ return ASSIGN; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 74 "..\\..\\src\\slc\\slc.l"
{ return ADDASSIGN; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 75 "..\\..\\src\\slc\\slc.l"
{ return SUBASSIGN; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 76 "..\\..\\src\\slc\\slc.l"
{ return MULASSIGN; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 77 "..\\..\\src\\slc\\slc.l"
{ return DIVASSIGN; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 79 "..\\..\\src\\slc\\slc.l"
{ yylval.d = atof(yytext); return NUMBER; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 80 "..\\..\\src\\slc\\slc.l"
{ yylval.d = atof(yytext);  return NUMBER; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 81 "..\\..\\src\\slc\\slc.l"
{ if (strlen(yytext)>MAX_STRLEN) { printf("%s exceed maximum string length, truncated.\n", yytext); strncpy(yylval.str, yytext, 255); } else strcpy(yylval.str, yytext); return IDENTIFIER; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 82 "..\\..\\src\\slc\\slc.l"
{ if (strlen(yytext)>MAX_STRLEN) { printf("%s exceed maximum string length, truncated.\n", yytext); strncpy(yylval.str, yytext+1, 255); } else { strcpy(yylval.str, yytext+1); yylval.str[strlen(yylval.str)-1]=0; } return STRINGCONSTANT; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 83 "..\\..\\src\\slc\\slc.l"
{ return yytext[0]; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 84 "..\\..\\src\\slc\\slc.l"
{}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 86 "..\\..\\src\\slc\\slc.l"
ECHO;
	YY_BREAK
#line 1209 "slc_lex.c"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a singled characater, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 394 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 394 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 393);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yytext_ptr = yy_c_buf_p;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						{
						yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
						return EOF;
						}

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
					break;

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in yyinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *str )
#else
YY_BUFFER_STATE yy_scan_string( str )
yyconst char *str;
#endif
	{
	int len;
	for ( len = 0; str[len]; ++len )
		;

	return yy_scan_bytes( str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 86 "..\\..\\src\\slc\\slc.l"


