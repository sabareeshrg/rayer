
/*  A Bison parser, made from ..\..\src\slc\slc.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	LIGHT	258
#define	SURFACE	259
#define	VOLUME	260
#define	DISPLACEMENT	261
#define	IMAGER	262
#define	CPP_LINE	263
#define	FLOAT	264
#define	STRING	265
#define	COLOR	266
#define	POINT	267
#define	VECTOR	268
#define	NORMAL	269
#define	MATRIX	270
#define	VOID	271
#define	VARYING	272
#define	UNIFORM	273
#define	OUTPUT	274
#define	EXTERN	275
#define	RETURN	276
#define	IF	277
#define	ELSE	278
#define	WHILE	279
#define	FOR	280
#define	SOLAR	281
#define	ILLUMINATE	282
#define	ILLUMINANCE	283
#define	BREAK	284
#define	CONTINUE	285
#define	NUMBER	286
#define	IDENTIFIER	287
#define	STRINGCONSTANT	288
#define	GT	289
#define	GE	290
#define	LT	291
#define	LE	292
#define	EQ	293
#define	NE	294
#define	AND	295
#define	OR	296
#define	ASSIGN	297
#define	ADDASSIGN	298
#define	SUBASSIGN	299
#define	MULASSIGN	300
#define	DIVASSIGN	301
#define	LOWER_THAN_ELSE	302
#define	CAST	303
#define	TYPECAST	304
#define	UMINUS	305
#define	HIGHEST	306

#line 1 "..\..\src\slc\slc.y"


#include <malloc.h>
#include <stdio.h>
#include "Node.hxx"
#include "FileNode.hxx"
#include "DefNode.hxx"
#include "ExprNode.hxx"
#include "RelationNode.hxx"
#include "StmtNode.hxx"

#define YYDEBUG 1 
#pragma warning(disable:4129)

extern int g_numlines;
extern string g_filename;
extern FILE *yyin;
extern int yylex();
void yyerror(const char *s)
{
	printf("%s:%d> %s\n", g_filename.c_str(), g_numlines, s);
}


#line 33 "..\..\src\slc\slc.y"
typedef union {
	int i;
	double d;
	char str[256];
	Node *node;
	NodeList *nodelist;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		269
#define	YYFLAG		-32768
#define	YYNTBASE	69

#define YYTRANSLATE(x) ((unsigned)(x) <= 306 ? yytranslate[x] : 92)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    59,     2,     2,     2,     2,     2,     2,    61,
    62,    56,    52,    66,    53,    57,    55,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    51,    65,     2,
     2,     2,    50,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    67,     2,    68,    54,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    63,     2,    64,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    58,    60
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     5,     7,     9,    11,    14,    18,    23,    31,
    40,    50,    57,    65,    73,    82,    91,   101,   103,   105,
   107,   109,   111,   113,   117,   120,   124,   128,   130,   133,
   135,   139,   141,   145,   147,   149,   151,   153,   155,   157,
   159,   161,   163,   165,   167,   170,   173,   176,   179,   183,
   186,   190,   193,   197,   201,   207,   210,   214,   217,   226,
   230,   235,   239,   244,   248,   253,   255,   259,   261,   265,
   269,   273,   277,   281,   285,   288,   294,   297,   301,   303,
   306,   308,   310,   312,   317,   319,   321,   329,   363,   367,
   371,   375,   379,   383,   387,   391,   395,   399,   402,   406,
   413,   417,   424,   428,   435,   439,   446,   450,   457,   461
};

static const short yyrhs[] = {    70,
     0,    69,    70,     0,    72,     0,    73,     0,    71,     0,
     8,    31,     0,     8,    31,    33,     0,     8,    31,    33,
    31,     0,    74,    32,    61,    62,    63,    82,    64,     0,
    74,    32,    61,    75,    62,    63,    82,    64,     0,    74,
    32,    61,    75,    65,    62,    63,    82,    64,     0,    32,
    61,    62,    63,    82,    64,     0,    77,    32,    61,    62,
    63,    82,    64,     0,    32,    61,    75,    62,    63,    82,
    64,     0,    32,    61,    75,    65,    62,    63,    82,    64,
     0,    77,    32,    61,    75,    62,    63,    82,    64,     0,
    77,    32,    61,    75,    65,    62,    63,    82,    64,     0,
     3,     0,     4,     0,     5,     0,     6,     0,     7,     0,
    76,     0,    75,    65,    76,     0,    77,    78,     0,    20,
    77,    78,     0,    19,    77,    78,     0,    80,     0,    81,
    80,     0,    79,     0,    78,    66,    79,     0,    32,     0,
    32,    42,    86,     0,     9,     0,    10,     0,    11,     0,
    12,     0,    13,     0,    14,     0,    15,     0,    16,     0,
    17,     0,    18,     0,    83,     0,    82,    83,     0,    76,
    65,     0,    90,    65,     0,    91,    65,     0,    21,    86,
    65,     0,    29,    65,     0,    29,    31,    65,     0,    30,
    65,     0,    30,    31,    65,     0,    22,    89,    83,     0,
    22,    89,    83,    23,    83,     0,    84,    83,     0,    63,
    82,    64,     0,    24,    89,     0,    25,    61,    86,    65,
    89,    65,    86,    62,     0,    26,    61,    62,     0,    26,
    61,    85,    62,     0,    27,    61,    62,     0,    27,    61,
    85,    62,     0,    28,    61,    62,     0,    28,    61,    85,
    62,     0,    86,     0,    85,    66,    86,     0,    88,     0,
    86,    57,    86,     0,    86,    54,    86,     0,    86,    52,
    86,     0,    86,    53,    86,     0,    86,    56,    86,     0,
    86,    55,    86,     0,    53,    86,     0,    89,    50,    86,
    51,    86,     0,    87,    86,     0,    61,    86,    62,     0,
    77,     0,    77,    33,     0,    31,     0,    33,     0,    32,
     0,    32,    67,    31,    68,     0,    91,     0,    90,     0,
    61,    86,    66,    86,    66,    86,    62,     0,    61,    86,
    66,    86,    66,    86,    66,    86,    66,    86,    66,    86,
    66,    86,    66,    86,    66,    86,    66,    86,    66,    86,
    66,    86,    66,    86,    66,    86,    66,    86,    66,    86,
    62,     0,    61,    89,    62,     0,    86,    34,    86,     0,
    86,    35,    86,     0,    86,    36,    86,     0,    86,    37,
    86,     0,    86,    38,    86,     0,    86,    39,    86,     0,
    89,    40,    89,     0,    89,    41,    89,     0,    59,    89,
     0,    32,    42,    86,     0,    32,    67,    31,    68,    42,
    86,     0,    32,    43,    86,     0,    32,    67,    31,    68,
    43,    86,     0,    32,    44,    86,     0,    32,    67,    31,
    68,    44,    86,     0,    32,    45,    86,     0,    32,    67,
    31,    68,    45,    86,     0,    32,    46,    86,     0,    32,
    67,    31,    68,    46,    86,     0,    32,    61,    62,     0,
    32,    61,    85,    62,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
    67,    68,    71,    72,    73,    76,    77,    78,    81,    82,
    83,    86,    87,    88,    89,    90,    91,    94,    95,    96,
    97,    98,   101,   102,   105,   106,   107,   110,   111,   114,
   115,   118,   119,   122,   123,   124,   125,   126,   127,   128,
   129,   132,   133,   136,   137,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151,   152,   155,   156,   157,
   158,   159,   160,   161,   162,   165,   166,   169,   170,   171,
   172,   173,   174,   175,   176,   177,   178,   179,   182,   183,
   186,   187,   188,   189,   190,   191,   192,   193,   196,   197,
   198,   199,   200,   201,   202,   203,   204,   205,   208,   209,
   210,   211,   212,   213,   214,   215,   216,   217,   220,   221
};

static const char * const yytname[] = {   "$","error","$undefined.","LIGHT",
"SURFACE","VOLUME","DISPLACEMENT","IMAGER","CPP_LINE","FLOAT","STRING","COLOR",
"POINT","VECTOR","NORMAL","MATRIX","VOID","VARYING","UNIFORM","OUTPUT","EXTERN",
"RETURN","IF","ELSE","WHILE","FOR","SOLAR","ILLUMINATE","ILLUMINANCE","BREAK",
"CONTINUE","NUMBER","IDENTIFIER","STRINGCONSTANT","GT","GE","LT","LE","EQ","NE",
"AND","OR","ASSIGN","ADDASSIGN","SUBASSIGN","MULASSIGN","DIVASSIGN","LOWER_THAN_ELSE",
"CAST","TYPECAST","'?'","':'","'+'","'-'","'^'","'/'","'*'","'.'","UMINUS","'!'",
"HIGHEST","'('","')'","'{'","'}'","';'","','","'['","']'","file","definition",
"cpp_line","shader_definition","function_definition","shader_type","formals",
"variable_definitions","typespec","def_expressions","def_expression","type",
"detail","statements","statement","loop_control","expressionlist","expression",
"typecast","primary","relation","assignexpression","procedurecall",""
};
#endif

static const short yyr1[] = {     0,
    69,    69,    70,    70,    70,    71,    71,    71,    72,    72,
    72,    73,    73,    73,    73,    73,    73,    74,    74,    74,
    74,    74,    75,    75,    76,    76,    76,    77,    77,    78,
    78,    79,    79,    80,    80,    80,    80,    80,    80,    80,
    80,    81,    81,    82,    82,    83,    83,    83,    83,    83,
    83,    83,    83,    83,    83,    83,    83,    84,    84,    84,
    84,    84,    84,    84,    84,    85,    85,    86,    86,    86,
    86,    86,    86,    86,    86,    86,    86,    86,    87,    87,
    88,    88,    88,    88,    88,    88,    88,    88,    89,    89,
    89,    89,    89,    89,    89,    89,    89,    89,    90,    90,
    90,    90,    90,    90,    90,    90,    90,    90,    91,    91
};

static const short yyr2[] = {     0,
     1,     2,     1,     1,     1,     2,     3,     4,     7,     8,
     9,     6,     7,     7,     8,     8,     9,     1,     1,     1,
     1,     1,     1,     3,     2,     3,     3,     1,     2,     1,
     3,     1,     3,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     2,     2,     2,     2,     3,     2,
     3,     2,     3,     3,     5,     2,     3,     2,     8,     3,
     4,     3,     4,     3,     4,     1,     3,     1,     3,     3,
     3,     3,     3,     3,     2,     5,     2,     3,     1,     2,
     1,     1,     1,     4,     1,     1,     7,    33,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     2,     3,     6,
     3,     6,     3,     6,     3,     6,     3,     6,     3,     4
};

static const short yydefact[] = {     0,
    18,    19,    20,    21,    22,     0,    34,    35,    36,    37,
    38,    39,    40,    41,    42,    43,     0,     0,     1,     5,
     3,     4,     0,     0,    28,     0,     6,     0,     2,     0,
     0,    29,     7,     0,     0,     0,     0,    23,     0,     0,
     0,     8,     0,     0,     0,     0,     0,    32,    25,    30,
     0,     0,     0,     0,    27,    26,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    44,
     0,     0,     0,     0,     0,    24,     0,     0,     0,     0,
     0,     0,     0,     0,    81,    83,    82,     0,     0,     0,
    79,     0,     0,    68,     0,    86,    85,     0,     0,    58,
     0,     0,     0,     0,     0,    50,     0,    52,     0,     0,
     0,     0,     0,     0,     0,     0,    46,    12,    45,    56,
    47,    48,     0,     0,    33,    31,     0,     0,     0,     0,
     0,     0,     0,    75,    98,     0,     0,    80,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    49,    77,     0,     0,     0,    54,     0,    60,     0,    66,
    62,     0,    64,     0,    51,    53,    99,   101,   103,   105,
   107,   109,     0,     0,    57,    14,     0,     9,     0,     0,
    13,     0,     0,     0,    78,     0,    89,    90,    91,    92,
    93,    94,    95,    71,    72,    70,    74,    73,    69,    96,
    97,     0,     0,     0,    61,     0,    63,    65,   110,     0,
    15,    10,     0,    16,     0,    84,     0,     0,    55,     0,
    67,     0,     0,     0,     0,     0,    11,    17,     0,    76,
     0,   100,   102,   104,   106,   108,     0,     0,    87,     0,
    59,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    88,     0,     0
};

static const short yydefgoto[] = {    18,
    19,    20,    21,    22,    23,    37,    68,    91,    49,    50,
    25,    26,    69,    70,    71,   159,    98,    93,    94,    95,
    96,    97
};

static const short yypact[] = {  1355,
-32768,-32768,-32768,-32768,-32768,   -29,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   -57,  1035,-32768,-32768,
-32768,-32768,    12,    27,-32768,   151,   -12,   464,-32768,    11,
    25,-32768,    30,   266,   266,     3,   -35,-32768,    59,   544,
   624,-32768,    59,    59,   799,    43,   705,    51,    54,-32768,
    63,   -33,    92,    23,    54,    54,   975,   975,   975,    56,
    95,   108,   111,   -28,   -26,   -36,   799,   110,   315,-32768,
   799,   113,   121,   799,    94,-32768,   975,    59,   799,   124,
   951,   799,   125,   963,-32768,   147,-32768,   975,   975,   975,
   143,  1260,   975,-32768,     2,-32768,-32768,  1380,   744,     2,
   975,   823,   833,   887,   130,-32768,   131,-32768,   975,   975,
   975,   975,   975,   897,   166,   399,-32768,-32768,-32768,-32768,
-32768,-32768,   423,   799,  1380,-32768,   479,   799,   135,   503,
   799,   136,   169,-32768,-32768,   328,   -24,-32768,   975,   975,
   975,   975,   975,   975,   975,   975,   975,   975,   975,   975,
-32768,  1380,   975,   975,   975,   178,  1292,-32768,   -47,  1380,
-32768,   -16,-32768,   -13,-32768,-32768,  1380,  1380,  1380,  1380,
  1380,-32768,   -11,   134,-32768,-32768,   559,-32768,   583,   799,
-32768,   639,   799,   139,-32768,   975,-32768,  1380,  1380,  1380,
  1380,  1380,  1380,    96,    96,    41,   153,   153,-32768,-32768,
   171,  1299,   799,   975,-32768,   975,-32768,-32768,-32768,    91,
-32768,-32768,   663,-32768,   719,    91,  1020,   975,-32768,   -17,
  1380,   975,   975,   975,   975,   975,-32768,-32768,   975,  1380,
   975,  1380,  1380,  1380,  1380,  1380,   964,  1340,-32768,   975,
-32768,  1026,   975,  1059,   975,  1065,   975,  1098,   975,  1104,
   975,  1137,   975,  1143,   975,  1176,   975,  1182,   975,  1215,
   975,  1221,   975,  1254,   975,  1369,-32768,   212,-32768
};

static const short yypgoto[] = {-32768,
   198,-32768,-32768,-32768,-32768,    37,   -27,     0,    61,   140,
   193,-32768,     1,   174,-32768,   -92,    -1,-32768,-32768,     5,
    -9,   192
};


#define	YYLAST		1437


static const short yytable[] = {    24,
    38,    27,   105,    28,   107,   109,   110,   111,   112,   113,
   162,   164,    38,    38,   205,   153,   154,    24,   206,    76,
    33,   173,   153,   154,   114,   155,    46,    39,    80,    47,
   115,    81,   155,    43,    44,    72,   106,   187,   108,    39,
    39,   153,   154,    30,    39,   207,    39,   231,   208,   206,
   209,   155,   206,    76,   206,    92,    76,    72,    31,    72,
    42,    72,    99,   100,    72,    45,    39,   116,    39,    72,
    39,    40,    72,    39,   123,   125,    52,    54,    39,   127,
    39,    39,   130,    39,    83,    41,   134,    84,   136,    72,
    48,   152,    77,   135,   137,   148,   149,   150,    39,   157,
   160,   160,   160,    55,    56,    74,    72,   167,   168,   169,
   170,   171,   160,    72,    72,    39,   101,    72,    72,    78,
    72,    72,    39,    39,   177,    79,    39,    39,   179,    39,
    39,   182,   222,   223,   224,   225,   226,   188,   189,   190,
   191,   192,   193,   194,   195,   196,   197,   198,   199,   147,
   148,   149,   150,   202,    82,   102,   124,   200,   201,     7,
     8,     9,    10,    11,    12,    13,    14,    72,   103,    72,
    72,   104,    72,    72,   117,   138,    39,   121,    39,    39,
   213,    39,    39,   215,   217,   122,   128,   131,   109,   110,
   111,   112,   113,    72,   165,   166,   174,   180,   183,   184,
   203,   210,    39,    72,   221,    72,   216,   114,   220,   150,
   153,   269,    39,   133,    39,    29,   230,   126,    32,     0,
   232,   233,   234,   235,   236,     0,     0,   237,     0,   238,
     0,     0,     0,     0,     0,     0,    73,     0,   242,     0,
     0,   244,   119,   246,   120,   248,     0,   250,     0,   252,
     0,   254,     0,   256,     0,   258,     0,   260,    73,   262,
    73,   264,    73,   266,     0,    73,     0,     0,     0,     0,
    73,     0,   156,    73,     7,     8,     9,    10,    11,    12,
    13,    14,    15,    16,     0,     0,     0,     0,     0,   119,
    73,     0,     0,     0,     0,     0,   119,     0,     0,     0,
   119,     0,     0,   119,     0,     0,     0,    73,     0,     0,
     0,     0,     0,     0,    73,    73,     0,     0,    73,    73,
     0,    73,    73,     7,     8,     9,    10,    11,    12,    13,
    14,    15,    16,    34,    35,    57,    58,     0,    59,    60,
    61,    62,    63,    64,    65,     0,    66,     0,     0,     0,
   119,     0,   119,     0,     0,   119,     0,     0,     0,     0,
     0,   139,   140,   141,   142,   143,   144,     0,    73,     0,
    73,    73,     0,    73,    73,     0,   219,    67,   118,   145,
   146,   147,   148,   149,   150,     0,   119,     0,   119,   185,
     0,     0,     0,   186,    73,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    73,     0,    73,     7,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    34,    35,    57,
    58,     0,    59,    60,    61,    62,    63,    64,    65,     0,
    66,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    34,    35,    57,    58,     0,    59,    60,    61,    62,
    63,    64,    65,     0,    66,     0,     0,     0,     0,     0,
     0,    67,   175,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     7,     8,     9,    10,    11,    12,    13,    14,
    15,    16,    34,    35,     0,    67,   176,     7,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    34,    35,    57,
    58,     0,    59,    60,    61,    62,    63,    64,    65,     0,
    66,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    34,    35,    57,    58,    36,    59,    60,    61,    62,
    63,    64,    65,     0,    66,     0,     0,     0,     0,     0,
     0,    67,   178,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     7,     8,     9,    10,    11,    12,    13,    14,
    15,    16,    34,    35,     0,    67,   181,     7,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    34,    35,    57,
    58,     0,    59,    60,    61,    62,    63,    64,    65,     0,
    66,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    34,    35,    57,    58,    51,    59,    60,    61,    62,
    63,    64,    65,     0,    66,     0,     0,     0,     0,     0,
     0,    67,   211,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     7,     8,     9,    10,    11,    12,    13,    14,
    15,    16,    34,    35,     0,    67,   212,     7,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    34,    35,    57,
    58,     0,    59,    60,    61,    62,    63,    64,    65,     0,
    66,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    34,    35,    57,    58,    53,    59,    60,    61,    62,
    63,    64,    65,     0,    66,     0,     0,     0,     0,     0,
     0,    67,   214,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     7,     8,     9,    10,    11,    12,    13,
    14,    15,    16,    34,    35,    67,   227,     7,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    34,    35,    57,
    58,     0,    59,    60,    61,    62,    63,    64,    65,     0,
    66,     0,     7,     8,     9,    10,    11,    12,    13,    14,
    15,    16,    34,    35,    57,    58,    75,    59,    60,    61,
    62,    63,    64,    65,     0,    66,     0,     0,     0,     0,
     0,    67,   228,   153,   154,     0,     0,     0,     0,     0,
     0,     0,     0,   155,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    67,     7,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    34,    35,    57,
    58,     0,    59,    60,    61,    62,    63,    64,    65,     0,
    66,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,     0,     0,    85,    86,    87,     0,     0,     0,     0,
     0,    67,     0,    85,    86,    87,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    88,     0,     0,     0,     0,
     0,    89,     0,    90,   158,    88,     0,     0,     0,     0,
     0,    89,     0,    90,   161,     7,     8,     9,    10,    11,
    12,    13,    14,    15,    16,     7,     8,     9,    10,    11,
    12,    13,    14,    15,    16,     0,     0,    85,    86,    87,
     0,     0,     0,     0,     0,     0,     0,    85,    86,    87,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    88,
     0,     0,     0,     0,     0,    89,     0,    90,   163,    88,
     0,     0,     0,     0,     0,    89,     0,    90,   172,     7,
     8,     9,    10,    11,    12,    13,    14,    15,    16,    34,
    35,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    34,    35,     7,     8,     9,    10,    11,    12,    13,
    14,    15,    16,     0,     0,     0,     0,   139,   140,   141,
   142,   143,   144,     0,     0,    85,    86,    87,     0,     0,
     0,     0,   129,     0,     0,   145,   146,   147,   148,   149,
   150,     0,     0,     0,   132,   239,     0,    88,     0,   240,
     0,     0,     0,    89,   268,    90,     0,     1,     2,     3,
     4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
    14,    15,    16,   139,   140,   141,   142,   143,   144,   139,
   140,   141,   142,   143,   144,     0,    17,     0,     0,     0,
     0,   145,   146,   147,   148,   149,   150,   145,   146,   147,
   148,   149,   150,     0,     0,   229,     0,     0,     0,     0,
     0,   243,   139,   140,   141,   142,   143,   144,   139,   140,
   141,   142,   143,   144,     0,     0,     0,     0,     0,     0,
   145,   146,   147,   148,   149,   150,   145,   146,   147,   148,
   149,   150,     0,     0,   245,     0,     0,     0,     0,     0,
   247,   139,   140,   141,   142,   143,   144,   139,   140,   141,
   142,   143,   144,     0,     0,     0,     0,     0,     0,   145,
   146,   147,   148,   149,   150,   145,   146,   147,   148,   149,
   150,     0,     0,   249,     0,     0,     0,     0,     0,   251,
   139,   140,   141,   142,   143,   144,   139,   140,   141,   142,
   143,   144,     0,     0,     0,     0,     0,     0,   145,   146,
   147,   148,   149,   150,   145,   146,   147,   148,   149,   150,
     0,     0,   253,     0,     0,     0,     0,     0,   255,   139,
   140,   141,   142,   143,   144,   139,   140,   141,   142,   143,
   144,     0,     0,     0,     0,     0,     0,   145,   146,   147,
   148,   149,   150,   145,   146,   147,   148,   149,   150,     0,
     0,   257,     0,     0,     0,     0,     0,   259,   139,   140,
   141,   142,   143,   144,   139,   140,   141,   142,   143,   144,
     0,     0,     0,     0,     0,     0,   145,   146,   147,   148,
   149,   150,   145,   146,   147,   148,   149,   150,     0,     0,
   261,     0,     0,     0,     0,     0,   263,   139,   140,   141,
   142,   143,   144,   139,   140,   141,   142,   143,   144,     0,
     0,     0,     0,     0,     0,   145,   146,   147,   148,   149,
   150,   145,   146,   147,   148,   149,   150,     0,     0,   265,
     0,     0,     0,     0,   151,   139,   140,   141,   142,   143,
   144,     0,   139,   140,   141,   142,   143,   144,     0,     0,
     0,     0,     0,   145,   146,   147,   148,   149,   150,   218,
   145,   146,   147,   148,   149,   150,   204,     1,     2,     3,
     4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
    14,    15,    16,   139,   140,   141,   142,   143,   144,     0,
     0,     0,     0,     0,     0,     0,    17,     0,     0,     0,
     0,   145,   146,   147,   148,   149,   150,     0,     0,     0,
     0,   241,   139,   140,   141,   142,   143,   144,     0,     0,
     0,     0,     0,   139,   140,   141,   142,   143,   144,     0,
   145,   146,   147,   148,   149,   150,     0,     0,     0,     0,
   267,   145,   146,   147,   148,   149,   150
};

static const short yycheck[] = {     0,
    28,    31,    31,    61,    31,    42,    43,    44,    45,    46,
   103,   104,    40,    41,    62,    40,    41,    18,    66,    47,
    33,   114,    40,    41,    61,    50,    62,    28,    62,    65,
    67,    65,    50,    34,    35,    45,    65,    62,    65,    40,
    41,    40,    41,    32,    45,    62,    47,    65,    62,    66,
    62,    50,    66,    81,    66,    57,    84,    67,    32,    69,
    31,    71,    58,    59,    74,    63,    67,    67,    69,    79,
    71,    61,    82,    74,    74,    77,    40,    41,    79,    79,
    81,    82,    82,    84,    62,    61,    88,    65,    90,    99,
    32,    93,    42,    89,    90,    55,    56,    57,    99,   101,
   102,   103,   104,    43,    44,    63,   116,   109,   110,   111,
   112,   113,   114,   123,   124,   116,    61,   127,   128,    66,
   130,   131,   123,   124,   124,    63,   127,   128,   128,   130,
   131,   131,    42,    43,    44,    45,    46,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,    54,
    55,    56,    57,   155,    63,    61,    63,   153,   154,     9,
    10,    11,    12,    13,    14,    15,    16,   177,    61,   179,
   180,    61,   182,   183,    65,    33,   177,    65,   179,   180,
   180,   182,   183,   183,   186,    65,    63,    63,    42,    43,
    44,    45,    46,   203,    65,    65,    31,    63,    63,    31,
    23,    68,   203,   213,   206,   215,    68,    61,   204,    57,
    40,     0,   213,    67,   215,    18,   218,    78,    26,    -1,
   222,   223,   224,   225,   226,    -1,    -1,   229,    -1,   231,
    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,   240,    -1,
    -1,   243,    69,   245,    71,   247,    -1,   249,    -1,   251,
    -1,   253,    -1,   255,    -1,   257,    -1,   259,    67,   261,
    69,   263,    71,   265,    -1,    74,    -1,    -1,    -1,    -1,
    79,    -1,    99,    82,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    -1,    -1,    -1,    -1,    -1,   116,
    99,    -1,    -1,    -1,    -1,    -1,   123,    -1,    -1,    -1,
   127,    -1,    -1,   130,    -1,    -1,    -1,   116,    -1,    -1,
    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,   127,   128,
    -1,   130,   131,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    -1,    24,    25,
    26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,
   177,    -1,   179,    -1,    -1,   182,    -1,    -1,    -1,    -1,
    -1,    34,    35,    36,    37,    38,    39,    -1,   177,    -1,
   179,   180,    -1,   182,   183,    -1,   203,    63,    64,    52,
    53,    54,    55,    56,    57,    -1,   213,    -1,   215,    62,
    -1,    -1,    -1,    66,   203,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   213,    -1,   215,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    -1,    24,    25,    26,    27,    28,    29,    30,    -1,
    32,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    -1,    24,    25,    26,    27,
    28,    29,    30,    -1,    32,    -1,    -1,    -1,    -1,    -1,
    -1,    63,    64,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    -1,    63,    64,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    -1,    24,    25,    26,    27,    28,    29,    30,    -1,
    32,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    62,    24,    25,    26,    27,
    28,    29,    30,    -1,    32,    -1,    -1,    -1,    -1,    -1,
    -1,    63,    64,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    -1,    63,    64,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    -1,    24,    25,    26,    27,    28,    29,    30,    -1,
    32,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    62,    24,    25,    26,    27,
    28,    29,    30,    -1,    32,    -1,    -1,    -1,    -1,    -1,
    -1,    63,    64,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    -1,    63,    64,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    -1,    24,    25,    26,    27,    28,    29,    30,    -1,
    32,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    62,    24,    25,    26,    27,
    28,    29,    30,    -1,    32,    -1,    -1,    -1,    -1,    -1,
    -1,    63,    64,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    63,    64,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    -1,    24,    25,    26,    27,    28,    29,    30,    -1,
    32,    -1,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    62,    24,    25,    26,
    27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,    -1,
    -1,    63,    64,    40,    41,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    63,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    -1,    24,    25,    26,    27,    28,    29,    30,    -1,
    32,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    -1,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
    -1,    63,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,
    -1,    59,    -1,    61,    62,    53,    -1,    -1,    -1,    -1,
    -1,    59,    -1,    61,    62,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    -1,    -1,    31,    32,    33,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,    32,    33,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    53,
    -1,    -1,    -1,    -1,    -1,    59,    -1,    61,    62,    53,
    -1,    -1,    -1,    -1,    -1,    59,    -1,    61,    62,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    -1,    -1,    -1,    -1,    34,    35,    36,
    37,    38,    39,    -1,    -1,    31,    32,    33,    -1,    -1,
    -1,    -1,    62,    -1,    -1,    52,    53,    54,    55,    56,
    57,    -1,    -1,    -1,    62,    62,    -1,    53,    -1,    66,
    -1,    -1,    -1,    59,     0,    61,    -1,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    34,    35,    36,    37,    38,    39,    34,
    35,    36,    37,    38,    39,    -1,    32,    -1,    -1,    -1,
    -1,    52,    53,    54,    55,    56,    57,    52,    53,    54,
    55,    56,    57,    -1,    -1,    66,    -1,    -1,    -1,    -1,
    -1,    66,    34,    35,    36,    37,    38,    39,    34,    35,
    36,    37,    38,    39,    -1,    -1,    -1,    -1,    -1,    -1,
    52,    53,    54,    55,    56,    57,    52,    53,    54,    55,
    56,    57,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
    66,    34,    35,    36,    37,    38,    39,    34,    35,    36,
    37,    38,    39,    -1,    -1,    -1,    -1,    -1,    -1,    52,
    53,    54,    55,    56,    57,    52,    53,    54,    55,    56,
    57,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    66,
    34,    35,    36,    37,    38,    39,    34,    35,    36,    37,
    38,    39,    -1,    -1,    -1,    -1,    -1,    -1,    52,    53,
    54,    55,    56,    57,    52,    53,    54,    55,    56,    57,
    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    66,    34,
    35,    36,    37,    38,    39,    34,    35,    36,    37,    38,
    39,    -1,    -1,    -1,    -1,    -1,    -1,    52,    53,    54,
    55,    56,    57,    52,    53,    54,    55,    56,    57,    -1,
    -1,    66,    -1,    -1,    -1,    -1,    -1,    66,    34,    35,
    36,    37,    38,    39,    34,    35,    36,    37,    38,    39,
    -1,    -1,    -1,    -1,    -1,    -1,    52,    53,    54,    55,
    56,    57,    52,    53,    54,    55,    56,    57,    -1,    -1,
    66,    -1,    -1,    -1,    -1,    -1,    66,    34,    35,    36,
    37,    38,    39,    34,    35,    36,    37,    38,    39,    -1,
    -1,    -1,    -1,    -1,    -1,    52,    53,    54,    55,    56,
    57,    52,    53,    54,    55,    56,    57,    -1,    -1,    66,
    -1,    -1,    -1,    -1,    65,    34,    35,    36,    37,    38,
    39,    -1,    34,    35,    36,    37,    38,    39,    -1,    -1,
    -1,    -1,    -1,    52,    53,    54,    55,    56,    57,    51,
    52,    53,    54,    55,    56,    57,    65,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    34,    35,    36,    37,    38,    39,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,    -1,    -1,
    -1,    52,    53,    54,    55,    56,    57,    -1,    -1,    -1,
    -1,    62,    34,    35,    36,    37,    38,    39,    -1,    -1,
    -1,    -1,    -1,    34,    35,    36,    37,    38,    39,    -1,
    52,    53,    54,    55,    56,    57,    -1,    -1,    -1,    -1,
    62,    52,    53,    54,    55,    56,    57
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 3:
#line 71 "..\..\src\slc\slc.y"
{ g_file.AddShaderDef((DefNode *)yyvsp[0].node); ;
    break;}
case 4:
#line 72 "..\..\src\slc\slc.y"
{ g_file.AddFuncDef((DefNode *)yyvsp[0].node); ;
    break;}
case 6:
#line 76 "..\..\src\slc\slc.y"
{ g_numlines = (int)(yyvsp[0].d)-1; ;
    break;}
case 7:
#line 77 "..\..\src\slc\slc.y"
{ g_numlines = (int)(yyvsp[-1].d)-1; g_filename = yyvsp[0].str; ;
    break;}
case 8:
#line 78 "..\..\src\slc\slc.y"
{ g_numlines = (int)(yyvsp[-2].d)-1; g_filename = yyvsp[-1].str; ;
    break;}
case 9:
#line 81 "..\..\src\slc\slc.y"
{ yyval.node = new ShaderDefNode((Suint32)yyvsp[-6].i, yyvsp[-5].str, NULL, yyvsp[-1].nodelist); ;
    break;}
case 10:
#line 82 "..\..\src\slc\slc.y"
{ yyval.node = new ShaderDefNode((Suint32)yyvsp[-7].i, yyvsp[-6].str, yyvsp[-4].nodelist, yyvsp[-1].nodelist); ;
    break;}
case 11:
#line 83 "..\..\src\slc\slc.y"
{ yyval.node = new ShaderDefNode((Suint32)yyvsp[-8].i, yyvsp[-7].str, yyvsp[-5].nodelist, yyvsp[-1].nodelist); ;
    break;}
case 12:
#line 86 "..\..\src\slc\slc.y"
{ yyval.node = new FuncDefNode(-1, yyvsp[-5].str, NULL, yyvsp[-1].nodelist); ;
    break;}
case 13:
#line 87 "..\..\src\slc\slc.y"
{ yyval.node = new FuncDefNode(yyvsp[-6].i, yyvsp[-5].str, NULL, yyvsp[-1].nodelist); ;
    break;}
case 14:
#line 88 "..\..\src\slc\slc.y"
{ yyval.node = new FuncDefNode(-1, yyvsp[-6].str, yyvsp[-4].nodelist, yyvsp[-1].nodelist); ;
    break;}
case 15:
#line 89 "..\..\src\slc\slc.y"
{ yyval.node = new FuncDefNode(-1, yyvsp[-7].str, yyvsp[-5].nodelist, yyvsp[-1].nodelist); ;
    break;}
case 16:
#line 90 "..\..\src\slc\slc.y"
{ yyval.node = new FuncDefNode(yyvsp[-7].i, yyvsp[-6].str, yyvsp[-4].nodelist, yyvsp[-1].nodelist); ;
    break;}
case 17:
#line 91 "..\..\src\slc\slc.y"
{ yyval.node = new FuncDefNode(yyvsp[-8].i, yyvsp[-7].str, yyvsp[-5].nodelist, yyvsp[-1].nodelist); ;
    break;}
case 18:
#line 94 "..\..\src\slc\slc.y"
{ yyval.i = SHADER_LIGHT; ;
    break;}
case 19:
#line 95 "..\..\src\slc\slc.y"
{ yyval.i = SHADER_SURFACE; ;
    break;}
case 20:
#line 96 "..\..\src\slc\slc.y"
{ yyval.i = SHADER_VOLUME; ;
    break;}
case 21:
#line 97 "..\..\src\slc\slc.y"
{ yyval.i = SHADER_DISPLACEMENT; ;
    break;}
case 22:
#line 98 "..\..\src\slc\slc.y"
{ yyval.i = SHADER_IMAGER; ;
    break;}
case 23:
#line 101 "..\..\src\slc\slc.y"
{ yyval.nodelist = yyvsp[0].nodelist; ;
    break;}
case 24:
#line 102 "..\..\src\slc\slc.y"
{ int n=yyvsp[0].nodelist->size(); for (int i=0; i<n; ++i) {Node *node = (*yyvsp[0].nodelist)[i]; yyvsp[-2].nodelist->push_back(node); } delete yyvsp[0].nodelist;  yyval.nodelist=yyvsp[-2].nodelist;;
    break;}
case 25:
#line 105 "..\..\src\slc\slc.y"
{ yyval.nodelist=yyvsp[0].nodelist; int n = yyvsp[0].nodelist->size(); for (int i=0; i<n; ++i) { DefVarNode *node = (DefVarNode *)(*yyvsp[0].nodelist)[i]; node->SetType(yyvsp[-1].i); } ;
    break;}
case 26:
#line 106 "..\..\src\slc\slc.y"
{ yyval.nodelist=yyvsp[0].nodelist; int n = yyvsp[0].nodelist->size(); for (int i=0; i<n; ++i) { DefVarNode *node = (DefVarNode *)(*yyvsp[0].nodelist)[i]; node->SetType(yyvsp[-1].i); node->SetExtern(); } ;
    break;}
case 27:
#line 107 "..\..\src\slc\slc.y"
{ yyval.nodelist=yyvsp[0].nodelist; int n = yyvsp[0].nodelist->size(); for (int i=0; i<n; ++i) { DefVarNode *node = (DefVarNode *)(*yyvsp[0].nodelist)[i]; node->SetType(yyvsp[-1].i); node->SetExtern(); } ;
    break;}
case 28:
#line 110 "..\..\src\slc\slc.y"
{ yyval.i = yyvsp[0].i; ;
    break;}
case 29:
#line 111 "..\..\src\slc\slc.y"
{ yyval.i = yyvsp[-1].i | yyvsp[0].i; ;
    break;}
case 30:
#line 114 "..\..\src\slc\slc.y"
{ yyval.nodelist = new NodeList; yyval.nodelist->push_back(yyvsp[0].node); ;
    break;}
case 31:
#line 115 "..\..\src\slc\slc.y"
{ yyval.nodelist = yyvsp[-2].nodelist, yyval.nodelist->push_back(yyvsp[0].node); ;
    break;}
case 32:
#line 118 "..\..\src\slc\slc.y"
{ yyval.node = new DefVarNode(new IdentNode(yyvsp[0].str), NULL); ;
    break;}
case 33:
#line 119 "..\..\src\slc\slc.y"
{ yyval.node = new DefVarNode(new IdentNode(yyvsp[-2].str), (ExprNode *)yyvsp[0].node); ;
    break;}
case 34:
#line 122 "..\..\src\slc\slc.y"
{ yyval.i = VAR_FLOAT; ;
    break;}
case 35:
#line 123 "..\..\src\slc\slc.y"
{ yyval.i = VAR_STRING; ;
    break;}
case 36:
#line 124 "..\..\src\slc\slc.y"
{ yyval.i = VAR_COLOR; ;
    break;}
case 37:
#line 125 "..\..\src\slc\slc.y"
{ yyval.i = VAR_POINT; ;
    break;}
case 38:
#line 126 "..\..\src\slc\slc.y"
{ yyval.i = VAR_VECTOR; ;
    break;}
case 39:
#line 127 "..\..\src\slc\slc.y"
{ yyval.i = VAR_NORMAL; ;
    break;}
case 40:
#line 128 "..\..\src\slc\slc.y"
{ yyval.i = VAR_MATRIX; ;
    break;}
case 41:
#line 129 "..\..\src\slc\slc.y"
{ yyval.i = -1; ;
    break;}
case 42:
#line 132 "..\..\src\slc\slc.y"
{ yyval.i = VAR_VARYING; ;
    break;}
case 43:
#line 133 "..\..\src\slc\slc.y"
{ yyval.i = VAR_UNIFORM; ;
    break;}
case 44:
#line 136 "..\..\src\slc\slc.y"
{ yyval.nodelist = new NodeList; yyval.nodelist->push_back(yyvsp[0].node); ;
    break;}
case 45:
#line 137 "..\..\src\slc\slc.y"
{ yyvsp[-1].nodelist->push_back(yyvsp[0].node); ;
    break;}
case 46:
#line 141 "..\..\src\slc\slc.y"
{ yyval.node = new VarDefStmtNode(yyvsp[-1].nodelist); ;
    break;}
case 47:
#line 142 "..\..\src\slc\slc.y"
{ yyval.node = new AssignStmtNode((ExprNode *)yyvsp[-1].node); ;
    break;}
case 48:
#line 143 "..\..\src\slc\slc.y"
{ yyval.node = new ProcCallStmtNode(yyvsp[-1].node); ;
    break;}
case 49:
#line 144 "..\..\src\slc\slc.y"
{ yyval.node = new ReturnStmtNode(yyvsp[-1].node); ;
    break;}
case 50:
#line 145 "..\..\src\slc\slc.y"
{ yyval.node = new BreakStmtNode(0); ;
    break;}
case 51:
#line 146 "..\..\src\slc\slc.y"
{ yyval.node = new BreakStmtNode(yyvsp[-1].d); ;
    break;}
case 52:
#line 147 "..\..\src\slc\slc.y"
{ yyval.node = new ContinueStmtNode(0); ;
    break;}
case 53:
#line 148 "..\..\src\slc\slc.y"
{ yyval.node = new ContinueStmtNode(yyvsp[-1].d); ;
    break;}
case 54:
#line 149 "..\..\src\slc\slc.y"
{ yyval.node = new IfStmtNode(yyvsp[-1].node, yyvsp[0].node, NULL); ;
    break;}
case 55:
#line 150 "..\..\src\slc\slc.y"
{ yyval.node = new IfStmtNode(yyvsp[-3].node, yyvsp[-2].node, yyvsp[0].node); ;
    break;}
case 56:
#line 151 "..\..\src\slc\slc.y"
{ LoopControlNode *node = (LoopControlNode *)yyvsp[-1].node; node->m_stmt = (StmtNode *)yyvsp[0].node; yyval.node=yyvsp[-1].node; ;
    break;}
case 57:
#line 152 "..\..\src\slc\slc.y"
{ yyval.node = new StmtListNode(yyvsp[-1].nodelist); ;
    break;}
case 58:
#line 155 "..\..\src\slc\slc.y"
{ yyval.node = new WhileNode(yyvsp[0].node); ;
    break;}
case 59:
#line 156 "..\..\src\slc\slc.y"
{ yyval.node = new ForNode(yyvsp[-5].node, yyvsp[-3].node, yyvsp[-1].node); ;
    break;}
case 60:
#line 157 "..\..\src\slc\slc.y"
{ yyval.node = new ProcCallLoopNode(new ProcCallNode("solar", NULL)); ;
    break;}
case 61:
#line 158 "..\..\src\slc\slc.y"
{ yyval.node = new ProcCallLoopNode(new ProcCallNode("solar", yyvsp[-1].nodelist)); ;
    break;}
case 62:
#line 159 "..\..\src\slc\slc.y"
{ yyval.node = new ProcCallLoopNode(new ProcCallNode("illuminate", NULL)); ;
    break;}
case 63:
#line 160 "..\..\src\slc\slc.y"
{ yyval.node = new ProcCallLoopNode(new ProcCallNode("illuminate", yyvsp[-1].nodelist)); ;
    break;}
case 64:
#line 161 "..\..\src\slc\slc.y"
{ yyval.node = new ProcCallLoopNode(new ProcCallNode("illuminance", NULL)); ;
    break;}
case 65:
#line 162 "..\..\src\slc\slc.y"
{ yyval.node = new ProcCallLoopNode(new ProcCallNode("illuminance", yyvsp[-1].nodelist)); ;
    break;}
case 66:
#line 165 "..\..\src\slc\slc.y"
{ yyval.nodelist = new NodeList; yyval.nodelist->push_back(yyvsp[0].node); ;
    break;}
case 67:
#line 166 "..\..\src\slc\slc.y"
{ yyval.nodelist = yyvsp[-2].nodelist; yyval.nodelist->push_back(yyvsp[0].node); ;
    break;}
case 68:
#line 169 "..\..\src\slc\slc.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 69:
#line 170 "..\..\src\slc\slc.y"
{ yyval.node = new BinopExprNode((ExprNode *)yyvsp[-2].node, '.', (ExprNode *)yyvsp[0].node); ;
    break;}
case 70:
#line 171 "..\..\src\slc\slc.y"
{ yyval.node = new BinopExprNode((ExprNode *)yyvsp[-2].node, '^', (ExprNode *)yyvsp[0].node); ;
    break;}
case 71:
#line 172 "..\..\src\slc\slc.y"
{ yyval.node = new BinopExprNode((ExprNode *)yyvsp[-2].node, '+', (ExprNode *)yyvsp[0].node); ;
    break;}
case 72:
#line 173 "..\..\src\slc\slc.y"
{ yyval.node = new BinopExprNode((ExprNode *)yyvsp[-2].node, '-', (ExprNode *)yyvsp[0].node); ;
    break;}
case 73:
#line 174 "..\..\src\slc\slc.y"
{ yyval.node = new BinopExprNode((ExprNode *)yyvsp[-2].node, '*', (ExprNode *)yyvsp[0].node); ;
    break;}
case 74:
#line 175 "..\..\src\slc\slc.y"
{ yyval.node = new BinopExprNode((ExprNode *)yyvsp[-2].node, '/', (ExprNode *)yyvsp[0].node); ;
    break;}
case 75:
#line 176 "..\..\src\slc\slc.y"
{ yyval.node = new UnaryExprNode('-', yyvsp[0].node); ;
    break;}
case 76:
#line 177 "..\..\src\slc\slc.y"
{ yyval.node = new QuestionExprNode(yyvsp[-4].node, yyvsp[-2].node, yyvsp[0].node); ;
    break;}
case 77:
#line 178 "..\..\src\slc\slc.y"
{ yyval.node = new TypecastExprNode(yyvsp[-1].node, yyvsp[0].node); ;
    break;}
case 78:
#line 179 "..\..\src\slc\slc.y"
{ yyval.node = yyvsp[-1].node; ;
    break;}
case 79:
#line 182 "..\..\src\slc\slc.y"
{ yyval.node = new Typecast(yyvsp[0].i); ;
    break;}
case 80:
#line 183 "..\..\src\slc\slc.y"
{ yyval.node = new Typecast(yyvsp[-1].i, yyvsp[0].str); ;
    break;}
case 81:
#line 186 "..\..\src\slc\slc.y"
{ yyval.node = new NumberExprNode(yyvsp[0].d); ;
    break;}
case 82:
#line 187 "..\..\src\slc\slc.y"
{ yyval.node = new StringConstantNode(yyvsp[0].str); ;
    break;}
case 83:
#line 188 "..\..\src\slc\slc.y"
{ yyval.node = new IdentNode(yyvsp[0].str); ;
    break;}
case 84:
#line 189 "..\..\src\slc\slc.y"
{ yyval.node = new IdentArrayNode(yyvsp[-3].str, yyvsp[-1].d); ;
    break;}
case 85:
#line 190 "..\..\src\slc\slc.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 86:
#line 191 "..\..\src\slc\slc.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 87:
#line 192 "..\..\src\slc\slc.y"
{ yyval.node = new TripleNode(yyvsp[-5].node, yyvsp[-3].node, yyvsp[-1].node); ;
    break;}
case 88:
#line 193 "..\..\src\slc\slc.y"
{ yyval.node= new SixteentupleNode(yyvsp[-31].node, yyvsp[-29].node, yyvsp[-27].node, yyvsp[-25].node, yyvsp[-23].node, yyvsp[-21].node, yyvsp[-19].node, yyvsp[-17].node, yyvsp[-15].node, yyvsp[-13].node, yyvsp[-11].node, yyvsp[-9].node, yyvsp[-7].node, yyvsp[-5].node, yyvsp[-3].node, yyvsp[-1].node); ;
    break;}
case 89:
#line 196 "..\..\src\slc\slc.y"
{ yyval.node = yyvsp[-1].node; ;
    break;}
case 90:
#line 197 "..\..\src\slc\slc.y"
{ yyval.node = new RelopNode(yyvsp[-2].node, GT, yyvsp[0].node); ;
    break;}
case 91:
#line 198 "..\..\src\slc\slc.y"
{ yyval.node = new RelopNode(yyvsp[-2].node, GE, yyvsp[0].node); ;
    break;}
case 92:
#line 199 "..\..\src\slc\slc.y"
{ yyval.node = new RelopNode(yyvsp[-2].node, LT, yyvsp[0].node); ;
    break;}
case 93:
#line 200 "..\..\src\slc\slc.y"
{ yyval.node = new RelopNode(yyvsp[-2].node, LE, yyvsp[0].node); ;
    break;}
case 94:
#line 201 "..\..\src\slc\slc.y"
{ yyval.node = new RelopNode(yyvsp[-2].node, EQ, yyvsp[0].node); ;
    break;}
case 95:
#line 202 "..\..\src\slc\slc.y"
{ yyval.node = new RelopNode(yyvsp[-2].node, NE, yyvsp[0].node); ;
    break;}
case 96:
#line 203 "..\..\src\slc\slc.y"
{ yyval.node = new LogopNode(yyvsp[-2].node, AND, yyvsp[0].node); ;
    break;}
case 97:
#line 204 "..\..\src\slc\slc.y"
{ yyval.node = new LogopNode(yyvsp[-2].node, OR, yyvsp[0].node); ;
    break;}
case 98:
#line 205 "..\..\src\slc\slc.y"
{ yyval.node = new NotRelNode(yyvsp[0].node); ;
    break;}
case 99:
#line 208 "..\..\src\slc\slc.y"
{ IdentNode *ien = new IdentNode(yyvsp[-2].str); yyval.node = new AssignExprNode(ien, (ExprNode *)yyvsp[0].node); ;
    break;}
case 100:
#line 209 "..\..\src\slc\slc.y"
{ yyval.node = new AssignExprNode(new IdentArrayNode(yyvsp[-5].str, yyvsp[-3].d), (ExprNode *)yyvsp[0].node); ;
    break;}
case 101:
#line 210 "..\..\src\slc\slc.y"
{ IdentNode *ien = new IdentNode(yyvsp[-2].str); BinopExprNode *ben = new BinopExprNode(ien, '+', (ExprNode *)yyvsp[0].node); yyval.node = new AssignExprNode(ien, ben); ;
    break;}
case 102:
#line 211 "..\..\src\slc\slc.y"
{ yyval.node = new AssignExprNode(new IdentArrayNode(yyvsp[-5].str, yyvsp[-3].d), (ExprNode *)yyvsp[0].node); ;
    break;}
case 103:
#line 212 "..\..\src\slc\slc.y"
{ IdentNode *ien = new IdentNode(yyvsp[-2].str); BinopExprNode *ben = new BinopExprNode(ien, '-', (ExprNode *)yyvsp[0].node); yyval.node = new AssignExprNode(ien, ben); ;
    break;}
case 104:
#line 213 "..\..\src\slc\slc.y"
{ yyval.node = new AssignExprNode(new IdentArrayNode(yyvsp[-5].str, yyvsp[-3].d), (ExprNode *)yyvsp[0].node); ;
    break;}
case 105:
#line 214 "..\..\src\slc\slc.y"
{ IdentNode *ien = new IdentNode(yyvsp[-2].str); BinopExprNode *ben = new BinopExprNode(ien, '*', (ExprNode *)yyvsp[0].node); yyval.node = new AssignExprNode(ien, ben); ;
    break;}
case 106:
#line 215 "..\..\src\slc\slc.y"
{ yyval.node = new AssignExprNode(new IdentArrayNode(yyvsp[-5].str, yyvsp[-3].d), (ExprNode *)yyvsp[0].node); ;
    break;}
case 107:
#line 216 "..\..\src\slc\slc.y"
{ IdentNode *ien = new IdentNode(yyvsp[-2].str); BinopExprNode *ben = new BinopExprNode(ien, '/', (ExprNode *)yyvsp[0].node); yyval.node = new AssignExprNode(ien, ben); ;
    break;}
case 108:
#line 217 "..\..\src\slc\slc.y"
{ yyval.node = new AssignExprNode(new IdentArrayNode(yyvsp[-5].str, yyvsp[-3].d), (ExprNode *)yyvsp[0].node); ;
    break;}
case 109:
#line 220 "..\..\src\slc\slc.y"
{ yyval.node = new ProcCallNode(yyvsp[-2].str, NULL); ;
    break;}
case 110:
#line 221 "..\..\src\slc\slc.y"
{ yyval.node = new ProcCallNode(yyvsp[-3].str, yyvsp[-1].nodelist); ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 225 "..\..\src\slc\slc.y"



